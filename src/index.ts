import {app, BrowserWindow, ipcMain, shell} from "electron";
import createInvite from "./utils/createInvite";
import path from "path";
import fs from "fs";
import {SavedLadderPayload} from "./types";
import dayjs from "dayjs";
import {getTreasuries} from "./back-end/getTreasuries";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1700,
    width: 850,
    icon: `${__dirname}/src/icons/512x512.png`,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (process.env.NODE_ENV === "development") {
    mainWindow.webContents.openDevTools();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  ipcMain.handle("get-bills", async () => {
    const {success, error} = await getTreasuries();
    if (error.length) {
      app.setAppLogsPath();
      const userDataPath = app.getPath("logs");
      const errorDate = dayjs().format("YYYY-MM-DD");
      const invitePath = path.join(userDataPath, `errors-${errorDate}.txt`);

      let content = error.map((err) => JSON.stringify(err)).join(",\n");
      content = fs.existsSync(invitePath) ? "," + content : content;
      fs.writeFileSync(invitePath, content, {encoding: "utf-8", flag: "a"});
    }
    return success;
  });

  ipcMain.handle("create-invite", (event, ladder: SavedLadderPayload) => {
    const content = createInvite(ladder);
    const userDataPath = app.getPath("userData");
    const invitePath = path.join(userDataPath, `${ladder.id}.ics`);
    fs.writeFileSync(invitePath, content, {encoding: "utf-8"});
    shell.openPath(invitePath);
    return true;
  });
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
